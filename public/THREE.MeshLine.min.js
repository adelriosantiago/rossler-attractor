!function(){function t(t,i,e,s,r){var a;if(t=t.subarray||t.slice?t:t.buffer,e=e.subarray||e.slice?e:e.buffer,t=i?t.subarray?t.subarray(i,r&&i+r):t.slice(i,r&&i+r):t,e.set)e.set(t,s);else for(a=0;a<t.length;a++)e[a+s]=t[a];return e}THREE.MeshLine=function(){this.positions=[],this.previous=[],this.next=[],this.side=[],this.width=[],this.indices_array=[],this.uvs=[],this.counters=[],this.geometry=new THREE.BufferGeometry,this.widthCallback=null},THREE.MeshLine.prototype.setGeometry=function(t,i){if(this.widthCallback=i,this.positions=[],this.counters=[],t instanceof THREE.Geometry)for(var e=0;e<t.vertices.length;e++){var s=t.vertices[e];i=e/t.vertices.length;this.positions.push(s.x,s.y,s.z),this.positions.push(s.x,s.y,s.z),this.counters.push(i),this.counters.push(i)}if(THREE.BufferGeometry,t instanceof Float32Array||t instanceof Array)for(e=0;e<t.length;e+=3){i=e/t.length;this.positions.push(t[e],t[e+1],t[e+2]),this.positions.push(t[e],t[e+1],t[e+2]),this.counters.push(i),this.counters.push(i)}this.process()},THREE.MeshLine.prototype.compareV3=function(t,i){var e=6*t,s=6*i;return this.positions[e]===this.positions[s]&&this.positions[e+1]===this.positions[s+1]&&this.positions[e+2]===this.positions[s+2]},THREE.MeshLine.prototype.copyV3=function(t){var i=6*t;return[this.positions[i],this.positions[i+1],this.positions[i+2]]},THREE.MeshLine.prototype.process=function(){var t,i,e=this.positions.length/6;this.previous=[],this.next=[],this.side=[],this.width=[],this.indices_array=[],this.uvs=[];for(var s=0;s<e;s++)this.side.push(1),this.side.push(-1);for(s=0;s<e;s++)t=this.widthCallback?this.widthCallback(s/(e-1)):1,this.width.push(t),this.width.push(t);for(s=0;s<e;s++)this.uvs.push(s/(e-1),0),this.uvs.push(s/(e-1),1);i=this.compareV3(0,e-1)?this.copyV3(e-2):this.copyV3(0),this.previous.push(i[0],i[1],i[2]),this.previous.push(i[0],i[1],i[2]);for(s=0;s<e-1;s++)i=this.copyV3(s),this.previous.push(i[0],i[1],i[2]),this.previous.push(i[0],i[1],i[2]);for(s=1;s<e;s++)i=this.copyV3(s),this.next.push(i[0],i[1],i[2]),this.next.push(i[0],i[1],i[2]);i=this.compareV3(e-1,0)?this.copyV3(1):this.copyV3(e-1),this.next.push(i[0],i[1],i[2]),this.next.push(i[0],i[1],i[2]);for(s=0;s<e-1;s++){var r=2*s;this.indices_array.push(r,r+1,r+2),this.indices_array.push(r+2,r+1,r+3)}this.attributes?(this.attributes.position.copyArray(new Float32Array(this.positions)),this.attributes.position.needsUpdate=!0,this.attributes.previous.copyArray(new Float32Array(this.previous)),this.attributes.previous.needsUpdate=!0,this.attributes.next.copyArray(new Float32Array(this.next)),this.attributes.next.needsUpdate=!0,this.attributes.side.copyArray(new Float32Array(this.side)),this.attributes.side.needsUpdate=!0,this.attributes.width.copyArray(new Float32Array(this.width)),this.attributes.width.needsUpdate=!0,this.attributes.uv.copyArray(new Float32Array(this.uvs)),this.attributes.uv.needsUpdate=!0,this.attributes.index.copyArray(new Uint16Array(this.indices_array)),this.attributes.index.needsUpdate=!0):this.attributes={position:new THREE.BufferAttribute(new Float32Array(this.positions),3),previous:new THREE.BufferAttribute(new Float32Array(this.previous),3),next:new THREE.BufferAttribute(new Float32Array(this.next),3),side:new THREE.BufferAttribute(new Float32Array(this.side),1),width:new THREE.BufferAttribute(new Float32Array(this.width),1),uv:new THREE.BufferAttribute(new Float32Array(this.uvs),2),index:new THREE.BufferAttribute(new Uint16Array(this.indices_array),1),counters:new THREE.BufferAttribute(new Float32Array(this.counters),1)},this.geometry.addAttribute("position",this.attributes.position),this.geometry.addAttribute("previous",this.attributes.previous),this.geometry.addAttribute("next",this.attributes.next),this.geometry.addAttribute("side",this.attributes.side),this.geometry.addAttribute("width",this.attributes.width),this.geometry.addAttribute("uv",this.attributes.uv),this.geometry.addAttribute("counters",this.attributes.counters),this.geometry.setIndex(this.attributes.index)},THREE.MeshLine.prototype.advance=function(i){var e=this.attributes.position.array,s=this.attributes.previous.array,r=this.attributes.next.array,a=e.length;t(e,0,s,0,a),t(e,6,e,0,a-6),e[a-6]=i.x,e[a-5]=i.y,e[a-4]=i.z,e[a-3]=i.x,e[a-2]=i.y,e[a-1]=i.z,t(e,6,r,0,a-6),r[a-6]=i.x,r[a-5]=i.y,r[a-4]=i.z,r[a-3]=i.x,r[a-2]=i.y,r[a-1]=i.z,this.attributes.position.needsUpdate=!0,this.attributes.previous.needsUpdate=!0,this.attributes.next.needsUpdate=!0},THREE.MeshLineMaterial=function(t){function i(t,i){return void 0===t?i:t}THREE.Material.call(this),t=t||{},this.lineWidth=i(t.lineWidth,1),this.map=i(t.map,null),this.useMap=i(t.useMap,0),this.color=i(t.color,new THREE.Color(16777215)),this.opacity=i(t.opacity,1),this.resolution=i(t.resolution,new THREE.Vector2(1,1)),this.sizeAttenuation=i(t.sizeAttenuation,1),this.near=i(t.near,1),this.far=i(t.far,1),this.dashArray=i(t.dashArray,[]),this.useDash=this.dashArray!==[]?1:0,this.visibility=i(t.visibility,1),this.alphaTest=i(t.alphaTest,0);var e=new THREE.RawShaderMaterial({uniforms:{lineWidth:{type:"f",value:this.lineWidth},map:{type:"t",value:this.map},useMap:{type:"f",value:this.useMap},color:{type:"c",value:this.color},opacity:{type:"f",value:this.opacity},resolution:{type:"v2",value:this.resolution},sizeAttenuation:{type:"f",value:this.sizeAttenuation},near:{type:"f",value:this.near},far:{type:"f",value:this.far},dashArray:{type:"v2",value:new THREE.Vector2(this.dashArray[0],this.dashArray[1])},useDash:{type:"f",value:this.useDash},visibility:{type:"f",value:this.visibility},alphaTest:{type:"f",value:this.alphaTest}},vertexShader:["precision highp float;","","attribute vec3 position;","attribute vec3 previous;","attribute vec3 next;","attribute float side;","attribute float width;","attribute vec2 uv;","attribute float counters;","","uniform mat4 projectionMatrix;","uniform mat4 modelViewMatrix;","uniform vec2 resolution;","uniform float lineWidth;","uniform vec3 color;","uniform float opacity;","uniform float near;","uniform float far;","uniform float sizeAttenuation;","","varying vec2 vUV;","varying vec4 vColor;","varying vec3 vPosition;","varying float vCounters;","","vec2 fix( vec4 i, float aspect ) {","","    vec2 res = i.xy / i.w;","    res.x *= aspect;","\t vCounters = counters;","    return res;","","}","","void main() {","","    float aspect = resolution.x / resolution.y;","\t float pixelWidthRatio = 1. / (resolution.x * projectionMatrix[0][0]);","","    vColor = vec4( color, opacity );","    vUV = uv;","","    mat4 m = projectionMatrix * modelViewMatrix;","    vec4 finalPosition = m * vec4( position, 1.0 );","    vec4 prevPos = m * vec4( previous, 1.0 );","    vec4 nextPos = m * vec4( next, 1.0 );","","    vec2 currentP = fix( finalPosition, aspect );","    vec2 prevP = fix( prevPos, aspect );","    vec2 nextP = fix( nextPos, aspect );","","\t float pixelWidth = finalPosition.w * pixelWidthRatio;","    float w = 1.8 * pixelWidth * lineWidth * width;","","    if( sizeAttenuation == 1. ) {","        w = 1.8 * lineWidth * width;","    }","","    vec2 dir;","    if( nextP == currentP ) dir = normalize( currentP - prevP );","    else if( prevP == currentP ) dir = normalize( nextP - currentP );","    else {","        vec2 dir1 = normalize( currentP - prevP );","        vec2 dir2 = normalize( nextP - currentP );","        dir = normalize( dir1 + dir2 );","","        vec2 perp = vec2( -dir1.y, dir1.x );","        vec2 miter = vec2( -dir.y, dir.x );","        //w = clamp( w / dot( miter, perp ), 0., 4. * lineWidth * width );","","    }","","    //vec2 normal = ( cross( vec3( dir, 0. ), vec3( 0., 0., 1. ) ) ).xy;","    vec2 normal = vec2( -dir.y, dir.x );","    normal.x /= aspect;","    normal *= .5 * w;","","    vec4 offset = vec4( normal * side, 0.0, 1.0 );","    finalPosition.xy += offset.xy;","","\t vPosition = ( modelViewMatrix * vec4( position, 1. ) ).xyz;","    gl_Position = finalPosition;","","}"].join("\r\n"),fragmentShader:["#extension GL_OES_standard_derivatives : enable","precision mediump float;","","uniform sampler2D map;","uniform float useMap;","uniform float useDash;","uniform vec2 dashArray;","uniform float visibility;","uniform float alphaTest;","","varying vec2 vUV;","varying vec4 vColor;","varying vec3 vPosition;","varying float vCounters;","","void main() {","","    vec4 c = vColor;","\t if( c.a < alphaTest ) discard;","    if( useMap == 1. ) c *= texture2D( map, vUV );","\t if( useDash == 1. ){","\t \t ","\t }","    gl_FragColor = c;","\t gl_FragColor.a *= step(vCounters,visibility);","}"].join("\r\n")});return delete t.lineWidth,delete t.map,delete t.useMap,delete t.color,delete t.opacity,delete t.resolution,delete t.sizeAttenuation,delete t.near,delete t.far,delete t.dashArray,delete t.visibility,delete t.alphaTest,e.type="MeshLineMaterial",e.setValues(t),e},THREE.MeshLineMaterial.prototype=Object.create(THREE.Material.prototype),THREE.MeshLineMaterial.prototype.constructor=THREE.MeshLineMaterial,THREE.MeshLineMaterial.prototype.copy=function(t){return THREE.Material.prototype.copy.call(this,t),this.lineWidth=t.lineWidth,this.map=t.map,this.useMap=t.useMap,this.color.copy(t.color),this.opacity=t.opacity,this.resolution.copy(t.resolution),this.sizeAttenuation=t.sizeAttenuation,this.near=t.near,this.far=t.far,this},window.THREE.MeshLineMaterial=THREE.MeshLineMaterial}();